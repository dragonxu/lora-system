{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"Controller/","text":"MAC Command Organizer The Network Server and the Network Controller implement the organization of the MAC Command. 1. MAC Command Queue For each end-device, the Network Controller maintains a MAC Command queue with each element in the queue as shown in the following Table. Field Description CID MAC Command ID Payload Byte sequence that Command may contain 2. Downlink MAC Command Algorithm 2.1 MAC Command Req Downlink Algorithm The algorithm takes the time when uplink packet arrives as the start of the loop. (1) Once the uplink data arrives, if the packet contains the MAC Command, the Network Server extracts the part and sends it to the Network Controller by an array. (2) The Network Controller will read all the commands in the MAC Command Queue, and put them into the array Q, then traverse the array Q, then delete all Ans; (3) The MAC Command in the data packet which the Network Controller receives contains Ans and Req, and the Network Controller will traverse all the data packet; (4) When Encountering MAC Command Ans, the Network Controller will compare it with the MAC Command Req of the array Q, and record the position of the first unmatched Ans-Req pair as d; (5) When Encountering MAC Command Req, the Network Controller will processe it; (6) Clear the original MAC Command queue, and push all elements of array Q from position d into the new MAC Command queue; (7) Traverse MAC Command Req Queue and application data Queue (8) Construct downlink data according to the TABLE 1 policy and send it to the Network Connector by Network Server (9) The Network Connector encapsulates the LoRa packet and delivers it to the gateway. TABLE 1 Downlink MAC Command and Application Data Group Package Policy Downlink Application Data Downlink MAC Commands Send Downlink Packet FOpts FRMPayload Other not have not have no - - - have not have yes null Application Data - not have have( 15 bytes) yes null MAC FPort = 0 not have have( = 15 bytes) yes MAC null - have have( 15 bytes) yes null MAC FPort = 0 FPending = 1 have have( = 15 bytes) yes null Application Data - 2.2 Boundary or Special Circumstances RXParamSetupAns, RXTimingSetupAns, DlChannelAns three types MAC Command\uff08TBD\uff09 Version Issue The server is based on LoRaWAN 1.1 protocol. Before issuing the MAC Command downlink,checking the LoRaWAN version supported by the device is principal. If the LoRaWAN version of device is out of support version,the MAC Command is directly removed from the queue. The total number of bytes of the MAC Command Queue exceeds 15 bytes, does not exceed the maximum allowed by FRMPayload, and there is data in the application data queue. Command Req is all placed in FRMPayload FPort = 0 FPending = 1 The total number of bytes in the MAC Command Queue exceeds the maximum allowed by FRMPayload Keep the last Command Req not sent FPending = 1 3. Uplink MAC Command Algorithm","title":"Overview"},{"location":"Controller/#mac-command-organizer","text":"The Network Server and the Network Controller implement the organization of the MAC Command.","title":"MAC Command Organizer"},{"location":"Controller/#1-mac-command-queue","text":"For each end-device, the Network Controller maintains a MAC Command queue with each element in the queue as shown in the following Table. Field Description CID MAC Command ID Payload Byte sequence that Command may contain","title":"1. MAC Command Queue"},{"location":"Controller/#2-downlink-mac-command-algorithm","text":"","title":"2. Downlink MAC Command Algorithm"},{"location":"Controller/#21-mac-command-req-downlink-algorithm","text":"The algorithm takes the time when uplink packet arrives as the start of the loop. (1) Once the uplink data arrives, if the packet contains the MAC Command, the Network Server extracts the part and sends it to the Network Controller by an array. (2) The Network Controller will read all the commands in the MAC Command Queue, and put them into the array Q, then traverse the array Q, then delete all Ans; (3) The MAC Command in the data packet which the Network Controller receives contains Ans and Req, and the Network Controller will traverse all the data packet; (4) When Encountering MAC Command Ans, the Network Controller will compare it with the MAC Command Req of the array Q, and record the position of the first unmatched Ans-Req pair as d; (5) When Encountering MAC Command Req, the Network Controller will processe it; (6) Clear the original MAC Command queue, and push all elements of array Q from position d into the new MAC Command queue; (7) Traverse MAC Command Req Queue and application data Queue (8) Construct downlink data according to the TABLE 1 policy and send it to the Network Connector by Network Server (9) The Network Connector encapsulates the LoRa packet and delivers it to the gateway. TABLE 1 Downlink MAC Command and Application Data Group Package Policy Downlink Application Data Downlink MAC Commands Send Downlink Packet FOpts FRMPayload Other not have not have no - - - have not have yes null Application Data - not have have( 15 bytes) yes null MAC FPort = 0 not have have( = 15 bytes) yes MAC null - have have( 15 bytes) yes null MAC FPort = 0 FPending = 1 have have( = 15 bytes) yes null Application Data -","title":"2.1 MAC Command Req Downlink Algorithm"},{"location":"Controller/#22-boundary-or-special-circumstances","text":"RXParamSetupAns, RXTimingSetupAns, DlChannelAns three types MAC Command\uff08TBD\uff09 Version Issue The server is based on LoRaWAN 1.1 protocol. Before issuing the MAC Command downlink,checking the LoRaWAN version supported by the device is principal. If the LoRaWAN version of device is out of support version,the MAC Command is directly removed from the queue. The total number of bytes of the MAC Command Queue exceeds 15 bytes, does not exceed the maximum allowed by FRMPayload, and there is data in the application data queue. Command Req is all placed in FRMPayload FPort = 0 FPending = 1 The total number of bytes in the MAC Command Queue exceeds the maximum allowed by FRMPayload Keep the last Command Req not sent FPending = 1","title":"2.2 Boundary or Special Circumstances"},{"location":"Controller/#3-uplink-mac-command-algorithm","text":"","title":"3. Uplink MAC Command Algorithm"},{"location":"Server/","text":"","title":"Overview"},{"location":"Server/http/","text":"HTTP APIs This document lists all HTTP API methods. User Register This API is used for user register and returns the userID. POST /register Request Headers: Content-Type: application/x-www-form-urlencoded Body: { email : test@xisiot.com , password : 123456 } Response Body: { userID : 4c0c99ca5caef7c9f4707d641c726f55 } User Login This API is used for user login and returns the userID. POST /login Request Headers: Content-Type: application/x-www-form-urlencoded Body: { email : test@xisiot.com , password : 123456 } Response Body: { userID : 4c0c99ca5caef7c9f4707d641c726f55 } Application Register This API is used for application register. POST /application Request Headers: Content-Type: application/x-www-form-urlencoded Body: { userID : 4c0c99ca5caef7c9f4707d641c726f55 , AppEUI : 9816be466f467a17 , name : test } Response Body: { code : 200 , message : success } Device Register This API is used for device register. POST /device Request Headers: Content-Type: application/x-www-form-urlencoded Body: { AppEUI : 9816be466f467a17 , DevEUI : AAAAAAAAAAAAAAAA , AppKey : FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF } Response Body: { code : 200 , message : success } Gateway Register This API is used for gateway register. POST /gateway Request Headers: Content-Type: application/x-www-form-urlencoded Body: { userID : 4c0c99ca5caef7c9f4707d641c726f55 , gatewayId : bbbbbbbbbbbbbbbb } Response Body: { code : 200 , message : success } MACCommand Sending This API is used to send the downlink MACCommand. POST /maccommand Request Headers: Content-Type: application/x-www-form-urlencoded Body: { DevAddr : 12345678 , MACCommand : 030200ff01 } Response Body: { code : 200 , message : success } MAC Commands Overstriking means the downlink MACCommand cid MAC Command payload length(byte) 0x01 ResetInd Version ResetConf Version 1 0x02 LinkCheckReq LinkCheckAns Margin 1 GwCnt 1 0x03 LinkADRReq TXPower 1 ChMask 2 Redundancy 1 LinkADRAns Status 0x04 DutyCycleReq DutyCyclePL 1 DutyCycleAns 0x05 RXParamSetupReq DLSettings 1 Frequency 3 RXParamSetupAns Status 0x06 DevStatusReq DevStatusAns Battery Margin 0x07 NewChannelReq ChIndex 1 Freq 3 DrRange 1 NewChannelAns Status 0x08 RXTimingSetupReq Settings 1 RXTimingSetupAns 0x09 TxParamSetupReq DwellTime 1 TxParamSetupAns 0x0A DlChannelReq ChIndex 1 Freq 3 DlChannelAns Status 0x0B RekeyInd Version RekeyConf Version 1 0x0C ADRParamSetupReq ADRParam 1 ADRParamSetupAns 0x0D DeviceTimeReq DeviceTimeAns Seconds 4 FractionalSec 1 0x0E ForceRejoinReq ForceRejoinReq 2 0x0F RejoinParamSetupReq RejoinParamSetupReq 1 RejoinParamSetupAns Status Error List code message 2101 invalid email 2102 invalid password 2103 invalid AppEUI 2104 invalid DevEUI 2105 invalid AppKey 2106 invalid gatewayId 2107 invalid DevAddr 2108 invalid MACCommand 3101 user already registered 3102 user not registered 3103 user password error 3201 application already created 3202 application not created 3301 device already created 3401 gateway already created","title":"HTTP API"},{"location":"Server/http/#http-apis","text":"This document lists all HTTP API methods.","title":"HTTP APIs"},{"location":"Server/http/#user-register","text":"This API is used for user register and returns the userID. POST /register Request Headers: Content-Type: application/x-www-form-urlencoded Body: { email : test@xisiot.com , password : 123456 } Response Body: { userID : 4c0c99ca5caef7c9f4707d641c726f55 }","title":"User Register"},{"location":"Server/http/#user-login","text":"This API is used for user login and returns the userID. POST /login Request Headers: Content-Type: application/x-www-form-urlencoded Body: { email : test@xisiot.com , password : 123456 } Response Body: { userID : 4c0c99ca5caef7c9f4707d641c726f55 }","title":"User Login"},{"location":"Server/http/#application-register","text":"This API is used for application register. POST /application Request Headers: Content-Type: application/x-www-form-urlencoded Body: { userID : 4c0c99ca5caef7c9f4707d641c726f55 , AppEUI : 9816be466f467a17 , name : test } Response Body: { code : 200 , message : success }","title":"Application Register"},{"location":"Server/http/#device-register","text":"This API is used for device register. POST /device Request Headers: Content-Type: application/x-www-form-urlencoded Body: { AppEUI : 9816be466f467a17 , DevEUI : AAAAAAAAAAAAAAAA , AppKey : FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF } Response Body: { code : 200 , message : success }","title":"Device Register"},{"location":"Server/http/#gateway-register","text":"This API is used for gateway register. POST /gateway Request Headers: Content-Type: application/x-www-form-urlencoded Body: { userID : 4c0c99ca5caef7c9f4707d641c726f55 , gatewayId : bbbbbbbbbbbbbbbb } Response Body: { code : 200 , message : success }","title":"Gateway Register"},{"location":"Server/http/#maccommand-sending","text":"This API is used to send the downlink MACCommand. POST /maccommand Request Headers: Content-Type: application/x-www-form-urlencoded Body: { DevAddr : 12345678 , MACCommand : 030200ff01 } Response Body: { code : 200 , message : success } MAC Commands Overstriking means the downlink MACCommand cid MAC Command payload length(byte) 0x01 ResetInd Version ResetConf Version 1 0x02 LinkCheckReq LinkCheckAns Margin 1 GwCnt 1 0x03 LinkADRReq TXPower 1 ChMask 2 Redundancy 1 LinkADRAns Status 0x04 DutyCycleReq DutyCyclePL 1 DutyCycleAns 0x05 RXParamSetupReq DLSettings 1 Frequency 3 RXParamSetupAns Status 0x06 DevStatusReq DevStatusAns Battery Margin 0x07 NewChannelReq ChIndex 1 Freq 3 DrRange 1 NewChannelAns Status 0x08 RXTimingSetupReq Settings 1 RXTimingSetupAns 0x09 TxParamSetupReq DwellTime 1 TxParamSetupAns 0x0A DlChannelReq ChIndex 1 Freq 3 DlChannelAns Status 0x0B RekeyInd Version RekeyConf Version 1 0x0C ADRParamSetupReq ADRParam 1 ADRParamSetupAns 0x0D DeviceTimeReq DeviceTimeAns Seconds 4 FractionalSec 1 0x0E ForceRejoinReq ForceRejoinReq 2 0x0F RejoinParamSetupReq RejoinParamSetupReq 1 RejoinParamSetupAns Status","title":"MACCommand Sending"},{"location":"Server/http/#error-list","text":"code message 2101 invalid email 2102 invalid password 2103 invalid AppEUI 2104 invalid DevEUI 2105 invalid AppKey 2106 invalid gatewayId 2107 invalid DevAddr 2108 invalid MACCommand 3101 user already registered 3102 user not registered 3103 user password error 3201 application already created 3202 application not created 3301 device already created 3401 gateway already created","title":"Error List"}]}