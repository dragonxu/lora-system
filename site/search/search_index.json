{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Xis LoRa System Introduction Architecture Our LoRa System consists of 5 main components: Connector Server Join Server Controller Application Server Specialties High-Performance LoRaWAN Services Scalable and Extensible Architecture MAC Commands Enabled Contact us Please contact us with Email .","title":"Home"},{"location":"#welcome-to-xis-lora-system","text":"","title":"Welcome to Xis LoRa System"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#architecture","text":"Our LoRa System consists of 5 main components: Connector Server Join Server Controller Application Server","title":"Architecture"},{"location":"#specialties","text":"High-Performance LoRaWAN Services Scalable and Extensible Architecture MAC Commands Enabled","title":"Specialties"},{"location":"#contact-us","text":"Please contact us with Email .","title":"Contact us"},{"location":"install/","text":"LoRaWAN system This is a whole LoRa system. Architecture Installation lora-system supports two methods for installation. Installation with repository System Requirements This system requires the following components imperatively. Node.js ( =8) MySQL ( =5.7) Redis Kafka MongoDB Getting Started Install all the components listed in System Requirements . Create a new database in MySQL. Start Kafka, Redis and MongoDB in the background. Clone this repo into a directory: git clone https://github.com/xisiot/lora-system.git --recursive cd lora-system Install all Node.js dependencies by npm install . Copy a local config.json from config_template.json : cp config_template.json config.json Modify the configurations of kafkaHost, MySQL and other customized fields in config.json . Use start.sh to start LoRa system: ./start.sh Installation with docker System Requirements This system requires the following components imperatively. Docker Getting Started Install all the components listed in System Requirements Pull the xisiot/lora-system docker image: docker pull xisiot/lora-system:latest Run the xisiot/lora-system image in a container, mapping your machine\u2019s port 12234 to the container\u2019s published port 12234 using -p : docker run -it --name= test -p 12234:12234/udp -p 3000:3000/tcp xisiot/lora-system:latest /bin/bash Start MySQL, Redis, MongoDB and Kafka in the background: service mysql start redis-server mongod -config /etc/mongod.conf cd root/kafka ./bin/zookeeper-server-start.sh -daemon config/zookeeper.properties ./bin/kafka-server-start.sh -daemon config/server.properties Use start.sh to start LoRa system: cd ../lora/lora-system ./start.sh License LoRa system is distributed under the GPL-3.0 license. See also License","title":"Install"},{"location":"install/#lorawan-system","text":"This is a whole LoRa system.","title":"LoRaWAN system"},{"location":"install/#architecture","text":"","title":"Architecture"},{"location":"install/#installation","text":"lora-system supports two methods for installation.","title":"Installation"},{"location":"install/#installation-with-repository","text":"","title":"Installation with repository"},{"location":"install/#system-requirements","text":"This system requires the following components imperatively. Node.js ( =8) MySQL ( =5.7) Redis Kafka MongoDB","title":"System Requirements"},{"location":"install/#getting-started","text":"Install all the components listed in System Requirements . Create a new database in MySQL. Start Kafka, Redis and MongoDB in the background. Clone this repo into a directory: git clone https://github.com/xisiot/lora-system.git --recursive cd lora-system Install all Node.js dependencies by npm install . Copy a local config.json from config_template.json : cp config_template.json config.json Modify the configurations of kafkaHost, MySQL and other customized fields in config.json . Use start.sh to start LoRa system: ./start.sh","title":"Getting Started"},{"location":"install/#installation-with-docker","text":"","title":"Installation with docker"},{"location":"install/#system-requirements_1","text":"This system requires the following components imperatively. Docker","title":"System Requirements"},{"location":"install/#getting-started_1","text":"Install all the components listed in System Requirements Pull the xisiot/lora-system docker image: docker pull xisiot/lora-system:latest Run the xisiot/lora-system image in a container, mapping your machine\u2019s port 12234 to the container\u2019s published port 12234 using -p : docker run -it --name= test -p 12234:12234/udp -p 3000:3000/tcp xisiot/lora-system:latest /bin/bash Start MySQL, Redis, MongoDB and Kafka in the background: service mysql start redis-server mongod -config /etc/mongod.conf cd root/kafka ./bin/zookeeper-server-start.sh -daemon config/zookeeper.properties ./bin/kafka-server-start.sh -daemon config/server.properties Use start.sh to start LoRa system: cd ../lora/lora-system ./start.sh","title":"Getting Started"},{"location":"install/#license","text":"LoRa system is distributed under the GPL-3.0 license. See also License","title":"License"},{"location":"lora/","text":"What is LoRa LoRaWAN LoRa is the physical layer or the wireless modulation utilized to create the long range communication link. It's a spread spectrum modulation technique derived from chirp spread spectrum (CSS) technology. LoRa maintains the same low power characteristics as FSK modulation but significantly increases the communication range. The LoRaWAN open specification is a low power, wide area networking (LPWAN) protocol based on LoRa Technology. The specification, which is specified by LoRa Alliance, defines the communication protocol and system architecture for LoRa networks. The protocol and network architecture have the most influence in determining the battery lifetime of a node, the network capacity, the quality of service, the security, and the variety of applications served by the network.","title":"LoRa & LoRaWAN"},{"location":"lora/#what-is-lora-lorawan","text":"LoRa is the physical layer or the wireless modulation utilized to create the long range communication link. It's a spread spectrum modulation technique derived from chirp spread spectrum (CSS) technology. LoRa maintains the same low power characteristics as FSK modulation but significantly increases the communication range. The LoRaWAN open specification is a low power, wide area networking (LPWAN) protocol based on LoRa Technology. The specification, which is specified by LoRa Alliance, defines the communication protocol and system architecture for LoRa networks. The protocol and network architecture have the most influence in determining the battery lifetime of a node, the network capacity, the quality of service, the security, and the variety of applications served by the network.","title":"What is LoRa &amp; LoRaWAN"},{"location":"Controller/","text":"MAC Command Organizer The Network Server and the Network Controller implement the organization of the MAC Command. 1. MAC Command Queue For each end-device, the Network Controller maintains a MAC Command queue with each element in the queue as shown in the following TABLE 1. TABLE 1 Field Description of MAC Command Queue Field Description CID MAC Command ID Payload Byte sequence that Command may contain 2. Downlink MAC Command Algorithm 2.1 MAC Command Req Downlink Algorithm The algorithm takes the time when uplink packet arrives as the start of the loop. Once the uplink data arrives, if the packet contains the MAC Command, the Network Server extracts the part and sends it to the Network Controller by an array; The Network Controller will read all the commands in the MAC Command Queue, and put them into the array Q, then traverse the array Q, then delete all Ans; The MAC Command in the data packet which the Network Controller receives contains Ans and Req, and the Network Controller will traverse all the data packet; When Encountering MAC Command Ans, the Network Controller will compare it with the MAC Command Req of the array Q, and record the position of the first unmatched Ans-Req pair as d; When Encountering MAC Command Req, the Network Controller will processe it; Clear the original MAC Command queue, and push all elements of array Q from position d into the new MAC Command queue; Traverse MAC Command Req Queue and application data Queue; Construct downlink data according to the TABLE 2 policy and send it to the Network Connector by Network Server; The Network Connector encapsulates the LoRa packet and delivers it to the gateway. TABLE 2 Downlink MAC Command and Application Data Group Package Policy Downlink Application Data Downlink MAC Commands Send Downlink Packet FOpts FRMPayload Other not have not have no - - - have not have yes null Application Data - not have have( 15 bytes) yes null MAC FPort = 0 not have have( = 15 bytes) yes MAC null - have have( 15 bytes) yes null MAC FPort = 0 FPending = 1 have have( = 15 bytes) yes null Application Data - 2.2 Boundary or Special Circumstances 2.2.1 RXParamSetupAns, RXTimingSetupAns, DlChannelAns three types MAC Command\uff08TBD\uff09 2.2.2 Version Issue The server is based on LoRaWAN 1.1 protocol. Before issuing the MAC Command downlink,checking the LoRaWAN version supported by the device is principal. If the LoRaWAN version of device is out of support version,the MAC Command is directly removed from the queue. 2.2.3 The total number of bytes of the MAC Command Queue exceeds 15 bytes, does not exceed the maximum allowed by FRMPayload, and there is data in the application data queue Command Req is all placed in FRMPayload FPort = 0 FPending = 1 2.2.4 The total number of bytes in the MAC Command Queue exceeds the maximum allowed by FRMPayload Keep the last Command Req not sent FPending = 1 3. Uplink MAC Command Algorithm 4. Network Server and Network Controller Interactive Data Format 4.1 Uplink(Network Server to Network Controller) The Network Server sends the uplink MAC Command and the transmission parameters which can be useful in the Network Controller. The data format is as follows. { DevAddr : , data : , adr : , devtx : { freq : , datr : , codr : , }, gwrx : [ { gatewayId : , time : , tmst : , chan : , rfch : , stat : , modu : , rssi : , lsnr : , size : , }, ], } The field description of uplink data is shown in the following TABLE 3. TABLE 3 Field Description of Uplink Data Format Field Type Example Required DevAddr Buffer Buffer 00 96 44 72 Yes data Array Explained below Yes ADR Bool true/false Yes devtx Object Table 4 for instructions Yes gwrx Array Table 5 for instructions Yes Description of data Field [ { 0x01 : { Version : Buffer 02 , }, }, { 0x02 : null, }, { 0x03 : { Status : Buffer 02 , }, }, ] TABLE 4 Description of devtx Field Field Type Example Required freq Number 433.3 Yes datr String \"SF7BW125\" Yes codr String \"4/6\" Yes TABLE 5 Description of gwrx Field Field Type Example Required gatewayId Buffer Buffer b8 27 ed ff fe 52 0e 51 Yes time String \"2013-03-31T16:21:17.528002Z\" Yes tmst Number 3512348611 Yes chan Number 2 Yes rfch Number 0 Yes stat Number 1 Yes modu String \"LORA\" Yes rssi Number -35 Yes lsnr Number 5.1 Yes size Number 32 Yes 4.2 Downlink(Network Controller to Network Server) The downlink MAC Command that the Network Controller will send is stored in the Redis queue as Json format. { cid : payload , } Example { 0x01 : { Version : Buffer 02 , }, } The MAC Command field definition is shown in the following TABLE 6. TABLE 6 Description of MAC Command Field cid MAC Command payload 0x01 ResetInd Version 0x01 ResetConf Version 0x02 LinkCheckReq 0x02 LinkCheckAns Margin GwCnt 0x03 LinkADRReq TXPower ChMask Redundancy 0x03 LinkADRAns Status 0x04 DutyCycleReq DutyCyclePL 0x04 DutyCycleAns 0x05 RXParamSetupReq DLSettings Frequency 0x05 RXParamSetupAns Status 0x06 DevStatusReq 0x06 DevStatusAns Battery Margin 0x07 NewChannelReq ChIndex Freq DrRange 0x07 NewChannelAns Status 0x08 RXTimingSetupReq Settings 0x08 RXTimingSetupAns 0x09 TxParamSetupReq DwellTime 0x09 TxParamSetupAns 0x0A DlChannelReq ChIndex Freq 0x0A DlChannelAns Status 0x0B RekeyInd Version 0x0B RekeyConf Version 0x0C ADRParamSetupReq ADRParam 0x0C ADRParamSetupAns 0x0D DeviceTimeReq 0x0D DeviceTimeAns Seconds FractionalSec 0x0E ForceRejoinReq ForceRejoinReq 0x0F RejoinParamSetupReq RejoinParamSetupReq 0x0F RejoinParamSetupAns Status 5. Introduction The Network Server and the Network Controller implement the organization of the MAC Command. The Network Controller implements the analysis of the uplink MAC Command and performs corresponding algorithm processing, and simultaneously delivers the downlink MAC Command command. The Network Controller includes processFlow Module, MAC Command Issuer and MAC Command Handler: processFlow Module The processFlow module is the core part of controller, which handles the MAC command part of each uplink data forwarded by the network server.The processing flow has been described in detail in the MAC Command Req Uplink Algorithm. MAC Command Issuer The MAC Command Issuer is used to initiate the MAC command, which is the form of the MAC command that the end-device can receive. MAC Command Handler The MAC command Handler is the processing of the MAC command in the uplink data.","title":"MAC Command Organizer"},{"location":"Controller/#mac-command-organizer","text":"The Network Server and the Network Controller implement the organization of the MAC Command.","title":"MAC Command Organizer"},{"location":"Controller/#1-mac-command-queue","text":"For each end-device, the Network Controller maintains a MAC Command queue with each element in the queue as shown in the following TABLE 1. TABLE 1 Field Description of MAC Command Queue Field Description CID MAC Command ID Payload Byte sequence that Command may contain","title":"1. MAC Command Queue"},{"location":"Controller/#2-downlink-mac-command-algorithm","text":"","title":"2. Downlink MAC Command Algorithm"},{"location":"Controller/#21-mac-command-req-downlink-algorithm","text":"The algorithm takes the time when uplink packet arrives as the start of the loop. Once the uplink data arrives, if the packet contains the MAC Command, the Network Server extracts the part and sends it to the Network Controller by an array; The Network Controller will read all the commands in the MAC Command Queue, and put them into the array Q, then traverse the array Q, then delete all Ans; The MAC Command in the data packet which the Network Controller receives contains Ans and Req, and the Network Controller will traverse all the data packet; When Encountering MAC Command Ans, the Network Controller will compare it with the MAC Command Req of the array Q, and record the position of the first unmatched Ans-Req pair as d; When Encountering MAC Command Req, the Network Controller will processe it; Clear the original MAC Command queue, and push all elements of array Q from position d into the new MAC Command queue; Traverse MAC Command Req Queue and application data Queue; Construct downlink data according to the TABLE 2 policy and send it to the Network Connector by Network Server; The Network Connector encapsulates the LoRa packet and delivers it to the gateway. TABLE 2 Downlink MAC Command and Application Data Group Package Policy Downlink Application Data Downlink MAC Commands Send Downlink Packet FOpts FRMPayload Other not have not have no - - - have not have yes null Application Data - not have have( 15 bytes) yes null MAC FPort = 0 not have have( = 15 bytes) yes MAC null - have have( 15 bytes) yes null MAC FPort = 0 FPending = 1 have have( = 15 bytes) yes null Application Data -","title":"2.1 MAC Command Req Downlink Algorithm"},{"location":"Controller/#22-boundary-or-special-circumstances","text":"","title":"2.2 Boundary or Special Circumstances"},{"location":"Controller/#221-rxparamsetupans-rxtimingsetupans-dlchannelans-three-types-mac-commandtbd","text":"","title":"2.2.1 RXParamSetupAns, RXTimingSetupAns, DlChannelAns three types MAC Command\uff08TBD\uff09"},{"location":"Controller/#222-version-issue","text":"The server is based on LoRaWAN 1.1 protocol. Before issuing the MAC Command downlink,checking the LoRaWAN version supported by the device is principal. If the LoRaWAN version of device is out of support version,the MAC Command is directly removed from the queue.","title":"2.2.2 Version Issue"},{"location":"Controller/#223-the-total-number-of-bytes-of-the-mac-command-queue-exceeds-15-bytes-does-not-exceed-the-maximum-allowed-by-frmpayload-and-there-is-data-in-the-application-data-queue","text":"Command Req is all placed in FRMPayload FPort = 0 FPending = 1","title":"2.2.3 The total number of bytes of the MAC Command Queue exceeds 15 bytes, does not exceed the maximum allowed by FRMPayload, and there is data in the application data queue"},{"location":"Controller/#224-the-total-number-of-bytes-in-the-mac-command-queue-exceeds-the-maximum-allowed-by-frmpayload","text":"Keep the last Command Req not sent FPending = 1","title":"2.2.4 The total number of bytes in the MAC Command Queue exceeds the maximum allowed by FRMPayload"},{"location":"Controller/#3-uplink-mac-command-algorithm","text":"","title":"3. Uplink MAC Command Algorithm"},{"location":"Controller/#4-network-server-and-network-controller-interactive-data-format","text":"","title":"4. Network Server and Network Controller Interactive Data Format"},{"location":"Controller/#41-uplinknetwork-server-to-network-controller","text":"The Network Server sends the uplink MAC Command and the transmission parameters which can be useful in the Network Controller. The data format is as follows. { DevAddr : , data : , adr : , devtx : { freq : , datr : , codr : , }, gwrx : [ { gatewayId : , time : , tmst : , chan : , rfch : , stat : , modu : , rssi : , lsnr : , size : , }, ], } The field description of uplink data is shown in the following TABLE 3. TABLE 3 Field Description of Uplink Data Format Field Type Example Required DevAddr Buffer Buffer 00 96 44 72 Yes data Array Explained below Yes ADR Bool true/false Yes devtx Object Table 4 for instructions Yes gwrx Array Table 5 for instructions Yes Description of data Field [ { 0x01 : { Version : Buffer 02 , }, }, { 0x02 : null, }, { 0x03 : { Status : Buffer 02 , }, }, ] TABLE 4 Description of devtx Field Field Type Example Required freq Number 433.3 Yes datr String \"SF7BW125\" Yes codr String \"4/6\" Yes TABLE 5 Description of gwrx Field Field Type Example Required gatewayId Buffer Buffer b8 27 ed ff fe 52 0e 51 Yes time String \"2013-03-31T16:21:17.528002Z\" Yes tmst Number 3512348611 Yes chan Number 2 Yes rfch Number 0 Yes stat Number 1 Yes modu String \"LORA\" Yes rssi Number -35 Yes lsnr Number 5.1 Yes size Number 32 Yes","title":"4.1 Uplink(Network Server to Network Controller)"},{"location":"Controller/#42-downlinknetwork-controller-to-network-server","text":"The downlink MAC Command that the Network Controller will send is stored in the Redis queue as Json format. { cid : payload , } Example { 0x01 : { Version : Buffer 02 , }, } The MAC Command field definition is shown in the following TABLE 6. TABLE 6 Description of MAC Command Field cid MAC Command payload 0x01 ResetInd Version 0x01 ResetConf Version 0x02 LinkCheckReq 0x02 LinkCheckAns Margin GwCnt 0x03 LinkADRReq TXPower ChMask Redundancy 0x03 LinkADRAns Status 0x04 DutyCycleReq DutyCyclePL 0x04 DutyCycleAns 0x05 RXParamSetupReq DLSettings Frequency 0x05 RXParamSetupAns Status 0x06 DevStatusReq 0x06 DevStatusAns Battery Margin 0x07 NewChannelReq ChIndex Freq DrRange 0x07 NewChannelAns Status 0x08 RXTimingSetupReq Settings 0x08 RXTimingSetupAns 0x09 TxParamSetupReq DwellTime 0x09 TxParamSetupAns 0x0A DlChannelReq ChIndex Freq 0x0A DlChannelAns Status 0x0B RekeyInd Version 0x0B RekeyConf Version 0x0C ADRParamSetupReq ADRParam 0x0C ADRParamSetupAns 0x0D DeviceTimeReq 0x0D DeviceTimeAns Seconds FractionalSec 0x0E ForceRejoinReq ForceRejoinReq 0x0F RejoinParamSetupReq RejoinParamSetupReq 0x0F RejoinParamSetupAns Status","title":"4.2 Downlink(Network Controller to Network Server)"},{"location":"Controller/#5-introduction","text":"The Network Server and the Network Controller implement the organization of the MAC Command. The Network Controller implements the analysis of the uplink MAC Command and performs corresponding algorithm processing, and simultaneously delivers the downlink MAC Command command. The Network Controller includes processFlow Module, MAC Command Issuer and MAC Command Handler: processFlow Module The processFlow module is the core part of controller, which handles the MAC command part of each uplink data forwarded by the network server.The processing flow has been described in detail in the MAC Command Req Uplink Algorithm. MAC Command Issuer The MAC Command Issuer is used to initiate the MAC command, which is the form of the MAC command that the end-device can receive. MAC Command Handler The MAC command Handler is the processing of the MAC command in the uplink data.","title":"5. Introduction"},{"location":"Server/","text":"","title":"Overview"},{"location":"Server/DataFormat/","text":"Data Format This document shows the data format for transmission. Network Connector to Network Server The Network Connector sends the parsed data and the transmission parameters to the Network Server. Data format { version : , token : , identifier : , gatewayId : , rxpk : { time : , tmst : , chan : , rfch : , freq : , stat : , modu : , datr : , codr : , rssi : , lsnr : , size : , data : { MHDR : { MType : , Major : }, MACPayload : { FHDR : { DevAddr : , FCtrl : { ADR : , ADRACKReq : , ACK : , ClassB : , FOptsLen : }, FCnt : , FOpts : }, FPort : , FRMPayload : }, MIC : } } } Field description TABLE 1. Field Description of Uplink Data Format(NC to NS) Field Type Example Required version Buffer Buffer 02 Yes token Buffer Buffer 5c 97 Yes identifier Buffer Buffer 02 Yes gatewayId Buffer Buffer b8 27 eb ff fe 52 0e 51 Yes rxpk Object Table 2 for instructions Yes TABLE 2. Description of rxpk Field Type Example Required time String \"2013-03-31T16:21:17.528002Z\" No tmst Number 3512348611 Yes chan Number 2 Yes rfch Number 0 Yes freq Number 433.3 Yes stat Number 1 Yes modu String \"LORA\" Yes datr String \"SF7BW125\" Yes codr String \"4/6\" Yes rssi Number -35 Yes lsnr Number 5.1 Yes size Number 32 No data Object Table 3 for instructions Yes TABLE 3. Description of data Field Type Example Required MHDR Object Table 4 for instructions Yes MACPayload Object Table 5 for instructions Yes MIC Buffer Buffer 5c 97 73 61 Yes TABLE 4. Description of MHDR Field Type Example Required MType Number 4 Yes Major Number 0 Yes TABLE 5. Description of MACPayload Field Type Example Required FHDR Object Table 6 for instructions Yes FPort Buffer Buffer 02 No FRMPayload Buffer / Array Buffer c9 77 36 15 / [1] No TABLE 6. Description of FHDR Field Type Example Required DevAddr Buffer Buffer 00 96 44 72 Yes FCtrl Object Table 7 for instructions Yes FCnt Buffer Buffer 5c 97 Yes FOpts Array [1] No TABLE 7. Description of FCtrl Field Type Example Required ADR Number 1 Yes ADRACKReq Number 0 Yes ACK Number 0 Yes ClassB Number 0 Yes FOptsLen Number 0 Yes Network Server to Network Connector The Network Server sends the downlink data and the transmission parameters to the Network Connector. Data format { version : , token : , identifier : , gatewayId : , txpk : { imme : , tmst : , freq : , rfch : , powe : , datr : , modu : , codr : , ipol : , size : , data : { MHDR : { MType : , Major : }, MACPayload : { FHDR : { DevAddr : , FCtrl : { ACK : , ADR : , FPending : , FOptsLen : }, FCnt : , FOpts : }, FPort : , FRMPayload : } } } } Field description TABLE 8. Field Description of Downlink Data Format(NS to NC) Field Type Example Required version Buffer Buffer 02 Yes token Buffer Buffer 5c 97 Yes identifier Buffer Buffer 02 Yes gatewayId Buffer Buffer b8 27 eb ff fe 52 0e 51 Yes txpk Object Table 9 for instructions Yes TABLE 9. Description of txpk Field Type Example Required imme Bool false No tmst Number 2746316372 No freq Number 433.3 No rfch Number 0 Yes powe Number 25 No datr String \"SF12BW125\" No modu String \"LORA\" No codr String \"4/5\" Yes ipol Bool false Yes size Number 32 No data Object Table 10 for instructions Yes TABLE 10. Description of data Field Type Example Required MHDR Object Table 11 for instructions Yes MACPayload Object Table 12 for instructions Yes TABLE 11. Description of MHDR Field Type Example Required MType Number 5 Yes Major Number 0 Yes TABLE 12. Description of MACPayload Field Type Example Required FHDR Object Table 13 for instructions Yes FPort Buffer Buffer 02 No FRMPayload Buffer / Array Buffer c9 77 36 15 / [1] No TABLE 13. Description of FHDR Field Type Example Required DevAddr Buffer Buffer 00 96 44 72 Yes FCtrl Object Table 14 for instructions Yes FCnt Buffer Buffer 5c 97 Yes FOpts Array [1] No TABLE 14. Description of FCtrl Field Type Example Required ACK Number 1 Yes ADR Number 1 Yes FPending Number 0 Yes FOptsLen Number 0 Yes Network Server to Join Server The Network Server sends the join request data and the transmission parameters to the Join Server. Data format { version : , token : , identifier : , gatewayId : , rxpk : { time : , tmst : , chan : , rfch : , freq : , stat : , modu : , datr : , codr : , rssi : , lsnr : , size : , raw : , data :{ MHDR : { MType :0, Major :0 }, MHDRRaw : 00 , MACPayload : 177a466f46be16983a24de487345feb2ebd4 , MIC : c274de2e } } } Field description TABLE 15. Field Description of Uplink Data Format(NS to JS) Field Type Example Required version Buffer Buffer 02 Yes token Buffer Buffer 5c 97 Yes identifier Buffer Buffer 02 Yes gatewayId Buffer Buffer b8 27 eb ff fe 52 0e 51 Yes rxpk Object Table 16 for instructions Yes TABLE 16. Description of rxpk Field Type Example Required time String \"2013-03-31T16:21:17.528002Z\" No tmst Number 3512348611 Yes chan Number 2 Yes rfch Number 0 Yes freq Number 433.3 Yes stat Number 1 Yes modu String \"LORA\" Yes datr String \"SF7BW125\" Yes codr String \"4/6\" Yes rssi Number -35 Yes lsnr Number 5.1 Yes size Number 32 No raw String \"ABd6Rm9GvhaYOiTeSHNF/rJXnRMP+2E=\" Yes data Object Table 17 for instructions Yes TABLE 17. Description of data Field Type Example Required MHDR Object Table 18 for instructions Yes MHDRRaw Buffer Buffer 00 Yes MACPayload Buffer Buffer 17 7a 46 6f 46 be 16 98 3a 24 de 48 73 45 fe b2 83 a0 Yes MIC Buffer Buffer 21 f7 23 f3 Yes TABLE 18. Description of MHDR Field Type Example Required MType Number 0 Yes Major Number 0 Yes Join Server to Network Server The Join Server sends the join accept data and the transmission parameters to the Network Server. Data format { version : , token : , identifier : , gatewayId : , rxpk : { time : , tmst : , chan : , rfch : , freq : , stat : , modu : , datr : , codr : , rssi : , lsnr : , size : , raw : , data : { MHDR : { MType : , Major : }, MACPayload : , DevAddr : } } } Field description TABLE 19. Field Description of Downlink Data Format(JS to NS) Field Type Example Required version Buffer Buffer 02 Yes token Buffer Buffer 5c 97 Yes identifier Buffer Buffer 02 Yes gatewayId Buffer Buffer b8 27 eb ff fe 52 0e 51 Yes rxpk Object Table 18 for instructions Yes TABLE 20. Description of rxpk Field Type Example Required time String \"2013-03-31T16:21:17.528002Z\" No tmst Number 3512348611 Yes chan Number 2 Yes rfch Number 0 Yes freq Number 433.3 Yes stat Number 1 Yes modu String \"LORA\" Yes datr String \"SF7BW125\" Yes codr String \"4/6\" Yes rssi Number -35 Yes lsnr Number 5.1 Yes size Number 32 No raw String \"ABd6Rm9GvhaYOiTeSHNF/rJXnRMP+2E=\" Yes data Object Table 19 for instructions Yes TABLE 21. Description of data Field Type Example Required MHDR Object Table 20 for instructions Yes MACPayload Buffer Buffer c7 5a e7 53 ca c2 3d de 75 29 f7 7c 36 3a 11 f6 Yes DevAddr Buffer Buffer 00 08 fb 31 Yes TABLE 22. Description of MHDR Field Type Example Required MType Number 1 Yes Major Number 0 Yes Network Server to Application Server The Network Server sends the Uplink data and the transmission parameters to the Application Server. Data format { DevAddr : , FRMPayload : } Field description TABLE 23. Field Description of Uplink Data Format(NS to AS) Field Type Example Required DevAddr Buffer Buffer 00 08 fb 31 Yes FRMPayload Buffer Buffer c9 77 36 15 Yes","title":"Data Format"},{"location":"Server/DataFormat/#data-format","text":"This document shows the data format for transmission.","title":"Data Format"},{"location":"Server/DataFormat/#network-connector-to-network-server","text":"The Network Connector sends the parsed data and the transmission parameters to the Network Server. Data format { version : , token : , identifier : , gatewayId : , rxpk : { time : , tmst : , chan : , rfch : , freq : , stat : , modu : , datr : , codr : , rssi : , lsnr : , size : , data : { MHDR : { MType : , Major : }, MACPayload : { FHDR : { DevAddr : , FCtrl : { ADR : , ADRACKReq : , ACK : , ClassB : , FOptsLen : }, FCnt : , FOpts : }, FPort : , FRMPayload : }, MIC : } } } Field description TABLE 1. Field Description of Uplink Data Format(NC to NS) Field Type Example Required version Buffer Buffer 02 Yes token Buffer Buffer 5c 97 Yes identifier Buffer Buffer 02 Yes gatewayId Buffer Buffer b8 27 eb ff fe 52 0e 51 Yes rxpk Object Table 2 for instructions Yes TABLE 2. Description of rxpk Field Type Example Required time String \"2013-03-31T16:21:17.528002Z\" No tmst Number 3512348611 Yes chan Number 2 Yes rfch Number 0 Yes freq Number 433.3 Yes stat Number 1 Yes modu String \"LORA\" Yes datr String \"SF7BW125\" Yes codr String \"4/6\" Yes rssi Number -35 Yes lsnr Number 5.1 Yes size Number 32 No data Object Table 3 for instructions Yes TABLE 3. Description of data Field Type Example Required MHDR Object Table 4 for instructions Yes MACPayload Object Table 5 for instructions Yes MIC Buffer Buffer 5c 97 73 61 Yes TABLE 4. Description of MHDR Field Type Example Required MType Number 4 Yes Major Number 0 Yes TABLE 5. Description of MACPayload Field Type Example Required FHDR Object Table 6 for instructions Yes FPort Buffer Buffer 02 No FRMPayload Buffer / Array Buffer c9 77 36 15 / [1] No TABLE 6. Description of FHDR Field Type Example Required DevAddr Buffer Buffer 00 96 44 72 Yes FCtrl Object Table 7 for instructions Yes FCnt Buffer Buffer 5c 97 Yes FOpts Array [1] No TABLE 7. Description of FCtrl Field Type Example Required ADR Number 1 Yes ADRACKReq Number 0 Yes ACK Number 0 Yes ClassB Number 0 Yes FOptsLen Number 0 Yes","title":"Network Connector to Network Server"},{"location":"Server/DataFormat/#network-server-to-network-connector","text":"The Network Server sends the downlink data and the transmission parameters to the Network Connector. Data format { version : , token : , identifier : , gatewayId : , txpk : { imme : , tmst : , freq : , rfch : , powe : , datr : , modu : , codr : , ipol : , size : , data : { MHDR : { MType : , Major : }, MACPayload : { FHDR : { DevAddr : , FCtrl : { ACK : , ADR : , FPending : , FOptsLen : }, FCnt : , FOpts : }, FPort : , FRMPayload : } } } } Field description TABLE 8. Field Description of Downlink Data Format(NS to NC) Field Type Example Required version Buffer Buffer 02 Yes token Buffer Buffer 5c 97 Yes identifier Buffer Buffer 02 Yes gatewayId Buffer Buffer b8 27 eb ff fe 52 0e 51 Yes txpk Object Table 9 for instructions Yes TABLE 9. Description of txpk Field Type Example Required imme Bool false No tmst Number 2746316372 No freq Number 433.3 No rfch Number 0 Yes powe Number 25 No datr String \"SF12BW125\" No modu String \"LORA\" No codr String \"4/5\" Yes ipol Bool false Yes size Number 32 No data Object Table 10 for instructions Yes TABLE 10. Description of data Field Type Example Required MHDR Object Table 11 for instructions Yes MACPayload Object Table 12 for instructions Yes TABLE 11. Description of MHDR Field Type Example Required MType Number 5 Yes Major Number 0 Yes TABLE 12. Description of MACPayload Field Type Example Required FHDR Object Table 13 for instructions Yes FPort Buffer Buffer 02 No FRMPayload Buffer / Array Buffer c9 77 36 15 / [1] No TABLE 13. Description of FHDR Field Type Example Required DevAddr Buffer Buffer 00 96 44 72 Yes FCtrl Object Table 14 for instructions Yes FCnt Buffer Buffer 5c 97 Yes FOpts Array [1] No TABLE 14. Description of FCtrl Field Type Example Required ACK Number 1 Yes ADR Number 1 Yes FPending Number 0 Yes FOptsLen Number 0 Yes","title":"Network Server to Network Connector"},{"location":"Server/DataFormat/#network-server-to-join-server","text":"The Network Server sends the join request data and the transmission parameters to the Join Server. Data format { version : , token : , identifier : , gatewayId : , rxpk : { time : , tmst : , chan : , rfch : , freq : , stat : , modu : , datr : , codr : , rssi : , lsnr : , size : , raw : , data :{ MHDR : { MType :0, Major :0 }, MHDRRaw : 00 , MACPayload : 177a466f46be16983a24de487345feb2ebd4 , MIC : c274de2e } } } Field description TABLE 15. Field Description of Uplink Data Format(NS to JS) Field Type Example Required version Buffer Buffer 02 Yes token Buffer Buffer 5c 97 Yes identifier Buffer Buffer 02 Yes gatewayId Buffer Buffer b8 27 eb ff fe 52 0e 51 Yes rxpk Object Table 16 for instructions Yes TABLE 16. Description of rxpk Field Type Example Required time String \"2013-03-31T16:21:17.528002Z\" No tmst Number 3512348611 Yes chan Number 2 Yes rfch Number 0 Yes freq Number 433.3 Yes stat Number 1 Yes modu String \"LORA\" Yes datr String \"SF7BW125\" Yes codr String \"4/6\" Yes rssi Number -35 Yes lsnr Number 5.1 Yes size Number 32 No raw String \"ABd6Rm9GvhaYOiTeSHNF/rJXnRMP+2E=\" Yes data Object Table 17 for instructions Yes TABLE 17. Description of data Field Type Example Required MHDR Object Table 18 for instructions Yes MHDRRaw Buffer Buffer 00 Yes MACPayload Buffer Buffer 17 7a 46 6f 46 be 16 98 3a 24 de 48 73 45 fe b2 83 a0 Yes MIC Buffer Buffer 21 f7 23 f3 Yes TABLE 18. Description of MHDR Field Type Example Required MType Number 0 Yes Major Number 0 Yes","title":"Network Server to Join Server"},{"location":"Server/DataFormat/#join-server-to-network-server","text":"The Join Server sends the join accept data and the transmission parameters to the Network Server. Data format { version : , token : , identifier : , gatewayId : , rxpk : { time : , tmst : , chan : , rfch : , freq : , stat : , modu : , datr : , codr : , rssi : , lsnr : , size : , raw : , data : { MHDR : { MType : , Major : }, MACPayload : , DevAddr : } } } Field description TABLE 19. Field Description of Downlink Data Format(JS to NS) Field Type Example Required version Buffer Buffer 02 Yes token Buffer Buffer 5c 97 Yes identifier Buffer Buffer 02 Yes gatewayId Buffer Buffer b8 27 eb ff fe 52 0e 51 Yes rxpk Object Table 18 for instructions Yes TABLE 20. Description of rxpk Field Type Example Required time String \"2013-03-31T16:21:17.528002Z\" No tmst Number 3512348611 Yes chan Number 2 Yes rfch Number 0 Yes freq Number 433.3 Yes stat Number 1 Yes modu String \"LORA\" Yes datr String \"SF7BW125\" Yes codr String \"4/6\" Yes rssi Number -35 Yes lsnr Number 5.1 Yes size Number 32 No raw String \"ABd6Rm9GvhaYOiTeSHNF/rJXnRMP+2E=\" Yes data Object Table 19 for instructions Yes TABLE 21. Description of data Field Type Example Required MHDR Object Table 20 for instructions Yes MACPayload Buffer Buffer c7 5a e7 53 ca c2 3d de 75 29 f7 7c 36 3a 11 f6 Yes DevAddr Buffer Buffer 00 08 fb 31 Yes TABLE 22. Description of MHDR Field Type Example Required MType Number 1 Yes Major Number 0 Yes","title":"Join Server to Network Server"},{"location":"Server/DataFormat/#network-server-to-application-server","text":"The Network Server sends the Uplink data and the transmission parameters to the Application Server. Data format { DevAddr : , FRMPayload : } Field description TABLE 23. Field Description of Uplink Data Format(NS to AS) Field Type Example Required DevAddr Buffer Buffer 00 08 fb 31 Yes FRMPayload Buffer Buffer c9 77 36 15 Yes","title":"Network Server to Application Server"},{"location":"Server/http/","text":"HTTP APIs This document lists all HTTP API methods. User Register This API is used for user register and returns the userID. POST /register Request Headers: Content-Type: application/x-www-form-urlencoded Body: { email : test@xisiot.com , password : 123456 } Response Body: { userID : 4c0c99ca5caef7c9f4707d641c726f55 } User Login This API is used for user login and returns the userID. POST /login Request Headers: Content-Type: application/x-www-form-urlencoded Body: { email : test@xisiot.com , password : 123456 } Response Body: { userID : 4c0c99ca5caef7c9f4707d641c726f55 } Application Register This API is used for application register. POST /application Request Headers: Content-Type: application/x-www-form-urlencoded Body: { userID : 4c0c99ca5caef7c9f4707d641c726f55 , AppEUI : 9816be466f467a17 , name : test } Response Body: { code : 200 , message : success } Device Register This API is used for device register. POST /device Request Headers: Content-Type: application/x-www-form-urlencoded Body: { AppEUI : 9816be466f467a17 , DevEUI : AAAAAAAAAAAAAAAA , AppKey : FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF } Response Body: { code : 200 , message : success } Gateway Register This API is used for gateway register. POST /gateway Request Headers: Content-Type: application/x-www-form-urlencoded Body: { userID : 4c0c99ca5caef7c9f4707d641c726f55 , gatewayId : bbbbbbbbbbbbbbbb } Response Body: { code : 200 , message : success } MACCommand Sending This API is used to send the downlink MACCommand. POST /maccommand Request Headers: Content-Type: application/x-www-form-urlencoded Body: { DevAddr : 12345678 , MACCommand : 030200ff01 } Response Body: { code : 200 , message : success } MAC Commands Overstriking means the downlink MACCommand cid MAC Command payload length(byte) 0x01 ResetInd Version ResetConf Version 1 0x02 LinkCheckReq LinkCheckAns Margin 1 GwCnt 1 0x03 LinkADRReq TXPower 1 ChMask 2 Redundancy 1 LinkADRAns Status 0x04 DutyCycleReq DutyCyclePL 1 DutyCycleAns 0x05 RXParamSetupReq DLSettings 1 Frequency 3 RXParamSetupAns Status 0x06 DevStatusReq DevStatusAns Battery Margin 0x07 NewChannelReq ChIndex 1 Freq 3 DrRange 1 NewChannelAns Status 0x08 RXTimingSetupReq Settings 1 RXTimingSetupAns 0x09 TxParamSetupReq DwellTime 1 TxParamSetupAns 0x0A DlChannelReq ChIndex 1 Freq 3 DlChannelAns Status 0x0B RekeyInd Version RekeyConf Version 1 0x0C ADRParamSetupReq ADRParam 1 ADRParamSetupAns 0x0D DeviceTimeReq DeviceTimeAns Seconds 4 FractionalSec 1 0x0E ForceRejoinReq ForceRejoinReq 2 0x0F RejoinParamSetupReq RejoinParamSetupReq 1 RejoinParamSetupAns Status Error List code message 2101 invalid email 2102 invalid password 2103 invalid AppEUI 2104 invalid DevEUI 2105 invalid AppKey 2106 invalid gatewayId 2107 invalid DevAddr 2108 invalid MACCommand 3101 user already registered 3102 user not registered 3103 user password error 3201 application already created 3202 application not created 3301 device already created 3401 gateway already created","title":"HTTP APIs"},{"location":"Server/http/#http-apis","text":"This document lists all HTTP API methods.","title":"HTTP APIs"},{"location":"Server/http/#user-register","text":"This API is used for user register and returns the userID. POST /register Request Headers: Content-Type: application/x-www-form-urlencoded Body: { email : test@xisiot.com , password : 123456 } Response Body: { userID : 4c0c99ca5caef7c9f4707d641c726f55 }","title":"User Register"},{"location":"Server/http/#user-login","text":"This API is used for user login and returns the userID. POST /login Request Headers: Content-Type: application/x-www-form-urlencoded Body: { email : test@xisiot.com , password : 123456 } Response Body: { userID : 4c0c99ca5caef7c9f4707d641c726f55 }","title":"User Login"},{"location":"Server/http/#application-register","text":"This API is used for application register. POST /application Request Headers: Content-Type: application/x-www-form-urlencoded Body: { userID : 4c0c99ca5caef7c9f4707d641c726f55 , AppEUI : 9816be466f467a17 , name : test } Response Body: { code : 200 , message : success }","title":"Application Register"},{"location":"Server/http/#device-register","text":"This API is used for device register. POST /device Request Headers: Content-Type: application/x-www-form-urlencoded Body: { AppEUI : 9816be466f467a17 , DevEUI : AAAAAAAAAAAAAAAA , AppKey : FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF } Response Body: { code : 200 , message : success }","title":"Device Register"},{"location":"Server/http/#gateway-register","text":"This API is used for gateway register. POST /gateway Request Headers: Content-Type: application/x-www-form-urlencoded Body: { userID : 4c0c99ca5caef7c9f4707d641c726f55 , gatewayId : bbbbbbbbbbbbbbbb } Response Body: { code : 200 , message : success }","title":"Gateway Register"},{"location":"Server/http/#maccommand-sending","text":"This API is used to send the downlink MACCommand. POST /maccommand Request Headers: Content-Type: application/x-www-form-urlencoded Body: { DevAddr : 12345678 , MACCommand : 030200ff01 } Response Body: { code : 200 , message : success } MAC Commands Overstriking means the downlink MACCommand cid MAC Command payload length(byte) 0x01 ResetInd Version ResetConf Version 1 0x02 LinkCheckReq LinkCheckAns Margin 1 GwCnt 1 0x03 LinkADRReq TXPower 1 ChMask 2 Redundancy 1 LinkADRAns Status 0x04 DutyCycleReq DutyCyclePL 1 DutyCycleAns 0x05 RXParamSetupReq DLSettings 1 Frequency 3 RXParamSetupAns Status 0x06 DevStatusReq DevStatusAns Battery Margin 0x07 NewChannelReq ChIndex 1 Freq 3 DrRange 1 NewChannelAns Status 0x08 RXTimingSetupReq Settings 1 RXTimingSetupAns 0x09 TxParamSetupReq DwellTime 1 TxParamSetupAns 0x0A DlChannelReq ChIndex 1 Freq 3 DlChannelAns Status 0x0B RekeyInd Version RekeyConf Version 1 0x0C ADRParamSetupReq ADRParam 1 ADRParamSetupAns 0x0D DeviceTimeReq DeviceTimeAns Seconds 4 FractionalSec 1 0x0E ForceRejoinReq ForceRejoinReq 2 0x0F RejoinParamSetupReq RejoinParamSetupReq 1 RejoinParamSetupAns Status","title":"MACCommand Sending"},{"location":"Server/http/#error-list","text":"code message 2101 invalid email 2102 invalid password 2103 invalid AppEUI 2104 invalid DevEUI 2105 invalid AppKey 2106 invalid gatewayId 2107 invalid DevAddr 2108 invalid MACCommand 3101 user already registered 3102 user not registered 3103 user password error 3201 application already created 3202 application not created 3301 device already created 3401 gateway already created","title":"Error List"}]}